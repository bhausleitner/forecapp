{"version":3,"sources":["views/analyze/Analyze.js"],"names":["Analyze","csvData","setCsvData","dataProps","settings","setSettings","forecastData","setForecastData","useContext","MyContext","override","css","loading","setLoading","useState","color","setColor","xs","className","promiseFn","myHeaders","Headers","append","requestOptions","method","headers","body","JSON","stringify","redirect","fetch","then","response","ok","Promise","reject","json","data","error","isLoading","size","message","type","labels","xLabels","datasets","label","borderWidth","backgroundColor","borderColor","pointRadius","originalForecast","forecast_y","map","value","index","NaN","forecast_yhat1","options","animations","tension","duration","easing","from","to","loop","onClick","console","log"],"mappings":"0RAgJeA,UA9HC,KACd,MAAM,QAAEC,EAAF,WAAWC,EAAX,UAAuBC,EAAvB,SAAkCC,EAAlC,YAA4CC,EAA5C,aAAyDC,EAAzD,gBAAuEC,GAC3EC,qBAAWC,KAOPC,EAAWC,cAAH,iFAId,IAAKC,EAASC,GAAcC,oBAAS,IAChCC,EAAOC,GAAYF,mBAAS,WA6BjC,OACE,cAAC,KAAD,UACE,cAAC,IAAD,CAAMG,GAAI,GAAV,SACE,eAAC,IAAD,CAAOC,UAAU,QAAjB,UACE,eAAC,IAAD,WACE,uBAAOA,UAAU,cAAjB,qBACA,oBAAIA,UAAU,YAAd,sBACA,uBAAOA,UAAU,eAAjB,sDAEF,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,UApCA,KACf,IAAIC,EAAY,IAAIC,QACpBD,EAAUE,OAAO,eAAgB,oBACjC,IAAIC,EAAiB,CACnBC,OAAQ,OACRC,QAASL,EACTM,KAAMC,KAAKC,UAAU,CAAC3B,EAASE,EAAWC,IAC1CyB,SAAU,UAMZ,OAJmBC,MApBM,8CAoBoBP,GAC1CQ,MAAMC,GAAcA,EAASC,GAAKD,EAAWE,QAAQC,OAAOH,KAC5DD,MAAMC,GAAaA,EAASI,UAyBvB,SACG,IAAiC,IAAhC,KAAEC,EAAF,MAAQC,EAAR,UAAeC,GAAgB,EAC/B,OAAIA,EAEA,sBAAKrB,UAAU,gBAAf,UACE,cAAC,IAAD,CAAYH,MAAM,UAAUJ,IAAKD,EAAU8B,KAAM,KAEjD,qBAAKtB,UAAU,iBAAf,SACE,qDACsB,gEAK1BoB,EAAc,6DAAgCA,EAAMG,QAAtC,OACdJ,EAEA,8BACE,cAAC,IAAD,CACEK,KAAK,OACLL,KAAM,CACJM,OAAQN,EAAKO,QACbC,SAAU,CACR,CACEC,MAAO,UACPC,YAAa,EACbC,gBAAiB,qBACjBC,YAAa,qBACbC,YAAa,EACbb,MA3CTc,EA2CyBd,EAAKe,WA1CxCD,EAAiBE,KAAI,CAACC,EAAOC,IAAwB,KAAbD,EAAM,GAAYE,IAAMF,EAAM,OA4CrD,CACER,MAAO,WACPC,YAAa,EACbC,gBAAiB,wBACjBC,YAAa,wBACbC,YAAa,EACbb,KAAMA,EAAKoB,kBAIjBC,QAAS,CACPC,WAAY,CACVC,QAAS,CACPC,SAAU,IACVC,OAAQ,aACRC,KAAM,EACNC,GAAI,EACJC,MAAM,SAQb,iEAtErB,IAAmBd,KAyET,cAAC,IAAD,CACET,KAAK,SACLxB,UAAU,+DACVgD,QAAS,KAjFnBC,QAAQC,IAAI,wBACZD,QAAQC,IAAInE,IA6EJ","file":"static/js/22.9c272245.chunk.js","sourcesContent":["import React, { useState, useContext } from 'react'\nimport Async from 'react-async'\nimport { css } from '@emotion/react'\nimport HashLoader from 'react-spinners/HashLoader'\nimport GridLoader from 'react-spinners/GridLoader'\nimport PropagateLoader from 'react-spinners/PropagateLoader'\nimport { CCard, CCardBody, CCardHeader, CCol, CRow, CButton, CWidgetStatsF } from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport {\n  cilVerticalAlignTop,\n  cilVerticalAlignBottom,\n  cilResizeWidth,\n  cilVideogame,\n} from '@coreui/icons'\nimport MyContext from 'src/context'\nimport { CChartLine } from '@coreui/react-chartjs'\nimport { CChart } from '@coreui/react-chartjs'\n\nconst Analyze = () => {\n  const { csvData, setCsvData, dataProps, settings, setSettings, forecastData, setForecastData } =\n    useContext(MyContext)\n\n  //api analysis endpoint url\n  // const api_base_url_train = 'http://localhost:5000/api/training/'\n  const api_base_url_train = 'https://forecapp.herokuapp.com/api/training'\n\n  // Can be a string as well. Need to ensure each key-value pair ends with ;\n  const override = css`\n    display: block;\n    margin: 200px auto 20px;\n  `\n  let [loading, setLoading] = useState(true)\n  let [color, setColor] = useState('#4285F4')\n\n  // function fetch Server and get forecast\n  const loadJson = () => {\n    var myHeaders = new Headers()\n    myHeaders.append('Content-Type', 'application/json')\n    var requestOptions = {\n      method: 'POST',\n      headers: myHeaders,\n      body: JSON.stringify([csvData, dataProps, settings]),\n      redirect: 'follow',\n    }\n    const myResponse = fetch(api_base_url_train, requestOptions)\n      .then((response) => (response.ok ? response : Promise.reject(response)))\n      .then((response) => response.json())\n\n    return myResponse\n  }\n\n  function buttonHandler() {\n    console.log('current csvData')\n    console.log(csvData)\n  }\n\n  // Replace '' in array with Nans, required for chart.js to handle plots with different length\n  function insertNan(originalForecast) {\n    return originalForecast.map((value, index) => (value[1] === '' ? NaN : value[1]))\n  }\n\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-12\">\n          <CCardHeader>\n            <small className=\"smallHeader\">ANALYZE</small>\n            <h3 className=\"midHeader\">Forecast</h3>\n            <small className=\"bottomHeader\">Analyze and understand your forecast.</small>\n          </CCardHeader>\n          <CCardBody>\n            <Async promiseFn={loadJson}>\n              {({ data, error, isLoading }) => {\n                if (isLoading)\n                  return (\n                    <div className=\"sweet-loading\">\n                      <GridLoader color=\"#4285F4\" css={override} size={15} />\n\n                      <div className=\"analyzeContent\">\n                        <p>\n                          Training your model <span>&nbsp;&#129497;&nbsp;</span>\n                        </p>\n                      </div>\n                    </div>\n                  )\n                if (error) return <p> There seems to be an error {error.message} </p>\n                if (data)\n                  return (\n                    <div>\n                      <CChart\n                        type=\"line\"\n                        data={{\n                          labels: data.xLabels,\n                          datasets: [\n                            {\n                              label: 'actuals',\n                              borderWidth: 2,\n                              backgroundColor: 'rgb(197, 218, 252)',\n                              borderColor: 'rgb(197, 218, 252)',\n                              pointRadius: 0,\n                              data: insertNan(data.forecast_y),\n                            },\n                            {\n                              label: 'forecast',\n                              borderWidth: 2,\n                              backgroundColor: 'rgba(66, 133, 244, 1)',\n                              borderColor: 'rgba(66, 133, 244, 1)',\n                              pointRadius: 0,\n                              data: data.forecast_yhat1,\n                            },\n                          ],\n                        }}\n                        options={{\n                          animations: {\n                            tension: {\n                              duration: 300,\n                              easing: 'easeInQuad',\n                              from: 1,\n                              to: 0,\n                              loop: false,\n                            },\n                          },\n                        }}\n                      />\n                    </div>\n                  )\n\n                return <p>I have no idea what to do here..</p>\n              }}\n            </Async>\n            <CButton\n              type=\"submit\"\n              className=\"text-white d-flex justify-content-center align-items-center'\"\n              onClick={() => buttonHandler()}\n            >\n              Console Log Baby\n            </CButton>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default Analyze\n"],"sourceRoot":""}