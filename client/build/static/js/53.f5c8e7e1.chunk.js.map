{"version":3,"sources":["../node_modules/@coreui/icons/js/free/cil-videogame.js","../node_modules/@coreui/icons/js/free/cil-resize-width.js","../node_modules/@coreui/icons/js/free/cil-vertical-align-top.js","../node_modules/@coreui/icons/js/free/cil-vertical-align-bottom.js","views/train/Train.js"],"names":["cilVideogame","cilResizeWidth","cilVerticalAlignTop","cilVerticalAlignBottom","Train","csvData","dataProps","setSettings","useContext","MyContext","lossFunction","lossFunctionLabel","button_value","checkedLossFunction","setCheckedLossFunction","useState","history","useHistory","myLabels","slice","map","element","index","myData","xs","className","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","pointRadius","color","icon","height","title","value","mean","std","max","min","sm","htmlFor","freq","type","onChange","e","target","id","checked","position","updatedCheckedState","item","handleOnChange","onClick","selectedIndex","flatMap","bool","timeSpan","lossFunc","push","buttonHandler"],"mappings":"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","file":"static/js/53.f5c8e7e1.chunk.js","sourcesContent":["export const cilVideogame = [\"512 512\",\"<path fill='var(--ci-primary-color, currentColor)' d='M16,360H496V120H16ZM48,152H464V328H48Z' class='ci-primary'/><polygon fill='var(--ci-primary-color, currentColor)' points='152 184 120 184 120 224 80 224 80 256 120 256 120 296 152 296 152 256 192 256 192 224 152 224 152 184' class='ci-primary'/><rect width='32' height='32' x='336' y='256' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/><rect width='32' height='32' x='400' y='192' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/>\"]","export const cilResizeWidth = [\"512 512\",\"<path fill='var(--ci-primary-color, currentColor)' d='M366.156,392H328V320H184v72H145.373L9.607,256.235,145.845,120H184v72H328V120h38.627L502.393,255.765ZM54.863,256.235,152,353.373V288H360v64.9l97.137-97.137L360,158.627V224H152V159.1Z' class='ci-primary'/>\"]","export const cilVerticalAlignTop = [\"512 512\",\"<rect width='480' height='32' x='16' y='16' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/><polygon fill='var(--ci-primary-color, currentColor)' points='155.883 195.883 178.51 218.51 240 157.02 240 456 272 456 272 157.02 333.49 218.51 356.117 195.883 256 95.764 155.883 195.883' class='ci-primary'/>\"]","export const cilVerticalAlignBottom = [\"512 512\",\"<polygon fill='var(--ci-primary-color, currentColor)' points='356.117 316.117 333.49 293.49 272 354.98 272 56 240 56 240 354.98 178.51 293.49 155.883 316.117 256 416.236 356.117 316.117' class='ci-primary'/><rect width='480' height='32' x='16' y='464' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/>\"]","import React, { useState, useContext } from 'react'\nimport ReactDOM from 'react-dom'\nimport Async from 'react-async'\nimport { useHistory } from 'react-router-dom'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CWidgetStatsF,\n  CFormInput,\n  CFormLabel,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport {\n  cilVerticalAlignTop,\n  cilVerticalAlignBottom,\n  cilResizeWidth,\n  cilVideogame,\n} from '@coreui/icons'\nimport MyContext from 'src/context'\nimport { CChartLine } from '@coreui/react-chartjs'\n\nconst Train = () => {\n  const { csvData, dataProps, setSettings } = useContext(MyContext)\n\n  const lossFunction = ['huber', 'mse', 'mae']\n  const lossFunctionLabel = ['Huber (default)', 'MSE', 'MAE']\n\n  var button_value = 5\n\n  const [checkedLossFunction, setCheckedLossFunction] = useState(\n    // new Array(lossFunction.length).fill(false),\n    [true, false, false],\n  )\n  const handleOnChange = (position) => {\n    // if state of position is true -> uncheck all others\n    const updatedCheckedState = checkedLossFunction.map((item, index) =>\n      index === position ? true : false,\n    )\n    setCheckedLossFunction(updatedCheckedState)\n  }\n  //useHistory hook to programmatically navigate to different route\n  const history = useHistory()\n\n  const myLabels = csvData.slice(1).map(function (element, index) {\n    return element[0]\n  })\n\n  const myData = csvData.slice(1).map(function (element, index) {\n    return element[1]\n  })\n\n  function buttonHandler() {\n    // get selected frequency by mapping boolean array\n    const selectedIndex = checkedLossFunction.flatMap((bool, index) => (bool ? index : []))\n    var inputFormString = button_value\n    setSettings({ timeSpan: inputFormString, lossFunc: lossFunction[selectedIndex] })\n    history.push('/analyze')\n  }\n\n  const formHandler = (e) => {\n    button_value = e.target.value\n  }\n\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <small className=\"smallHeader\">TRAIN</small>\n            <h3 className=\"midHeader\">Plot</h3>\n            <small className=\"bottomHeader\">Plot data and get metrics.</small>\n          </CCardHeader>\n          <CCardBody>\n            <CChartLine\n              data={{\n                labels: myLabels,\n                datasets: [\n                  {\n                    label: 'actuals',\n                    backgroundColor: 'rgba(220, 220, 220, 0.2)',\n                    borderColor: 'rgba(220, 220, 220, 1)',\n                    borderWidth: 2,\n                    pointRadius: 0,\n                    data: myData,\n                  },\n                ],\n              }}\n            />\n            <hr></hr>\n            <CRow>\n              <CCol xs={3}>\n                <CWidgetStatsF\n                  className=\"mb-3\"\n                  color=\"primary\"\n                  icon={<CIcon icon={cilVideogame} height={24} />}\n                  title=\"Mean\"\n                  value={dataProps.mean}\n                />\n              </CCol>\n              <CCol xs={3}>\n                <CWidgetStatsF\n                  className=\"mb-3\"\n                  color=\"primary\"\n                  icon={<CIcon icon={cilResizeWidth} height={24} />}\n                  title=\"Std\"\n                  value={dataProps.std}\n                />\n              </CCol>\n              <CCol xs={3}>\n                <CWidgetStatsF\n                  className=\"mb-3\"\n                  color=\"primary\"\n                  icon={<CIcon icon={cilVerticalAlignTop} height={24} />}\n                  title=\"Max\"\n                  value={dataProps.max}\n                />\n              </CCol>\n              <CCol xs={3}>\n                <CWidgetStatsF\n                  className=\"mb-3\"\n                  color=\"primary\"\n                  icon={<CIcon icon={cilVerticalAlignBottom} height={24} />}\n                  title=\"Min\"\n                  value={dataProps.min}\n                />\n              </CCol>\n            </CRow>\n          </CCardBody>\n        </CCard>\n        <CCard>\n          <CCardHeader>\n            <small className=\"smallHeader\">TRAIN</small>\n            <h3 className=\"midHeader\">Initialize Model</h3>\n            <small className=\"bottomHeader\">Configure your settings and train model.</small>\n          </CCardHeader>\n          <CCardBody>\n            <CRow className=\"mb-3\">\n              <CCol className=\" first-col\" sm={6}>\n                <CFormLabel htmlFor=\"inputEmail3\">\n                  <small className=\"smallHeader\">\n                    FORECAST LENGTH<br></br>\n                  </small>\n                  How many <strong>{dataProps.freq[0]}</strong> do you want to forecast out?\n                </CFormLabel>\n                <CCol sm={3}>\n                  <CFormInput type=\"email\" onChange={formHandler} id=\"inputEmail3\" />\n                </CCol>\n              </CCol>\n              <CCol sm={6}>\n                <small className=\"smallHeader\">LOSS FUNCTION</small>\n\n                {lossFunction.map((value, index) => {\n                  return (\n                    <div key={index} className=\"form-check\">\n                      <input\n                        className=\"form-check-input\"\n                        type=\"radio\"\n                        id={`radio-${value}`}\n                        checked={checkedLossFunction[index]}\n                        onChange={() => handleOnChange(index)}\n                      ></input>\n                      <label htmlFor={`radio-${value}`}>{lossFunctionLabel[index]}</label>\n                    </div>\n                  )\n                })}\n              </CCol>\n            </CRow>\n            <CButton type=\"submit\" className=\"text-white\" onClick={() => buttonHandler()}>\n              Train Model\n            </CButton>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default Train\n// DUMP\n"],"sourceRoot":""}